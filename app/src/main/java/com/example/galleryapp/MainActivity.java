package com.example.galleryapp;

import android.Manifest;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

// Import R class, assuming it will be generated by the build system
// import com.example.galleryapp.R;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity {

    private RecyclerView recyclerView;
    private ImageAdapter imageAdapter;
    private List<Uri> imageUris;
    private ProgressBar progressBar;
    private static final int PERMISSION_REQUEST_READ_MEDIA_IMAGES = 100;
    private static final int PERMISSION_REQUEST_READ_EXTERNAL_STORAGE = 101;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        recyclerView = findViewById(R.id.recyclerViewGallery);
        progressBar = findViewById(R.id.progressBar); // Initialize ProgressBar
        recyclerView.setLayoutManager(new GridLayoutManager(this, 3)); // 3 columns

        // imageUris will be initialized in LoadImagesTask or if adapter is null
        // imageUris = new ArrayList<>();

        checkAndRequestPermissions();
    }

    private void checkAndRequestPermissions() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) { // Android 13+ (API 33)
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_MEDIA_IMAGES) != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_MEDIA_IMAGES}, PERMISSION_REQUEST_READ_MEDIA_IMAGES);
            } else {
                loadImages();
            }
        } else { // Below Android 13
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, PERMISSION_REQUEST_READ_EXTERNAL_STORAGE);
            } else {
                loadImages();
            }
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == PERMISSION_REQUEST_READ_MEDIA_IMAGES || requestCode == PERMISSION_REQUEST_READ_EXTERNAL_STORAGE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                loadImages();
            } else {
                Toast.makeText(this, "Permission denied. Cannot load images.", Toast.LENGTH_LONG).show();
            }
        }
    }

    private void loadImages() {
        new LoadImagesTask().execute();
    }

    // Inner AsyncTask class to load images in the background
    private class LoadImagesTask extends AsyncTask<Void, Void, List<Uri>> {

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            if (progressBar != null) {
                progressBar.setVisibility(View.VISIBLE);
            }
            // Initialize imageUris if it's null, or clear for new load
            if (imageUris == null) {
                imageUris = new ArrayList<>();
            }
            // Clear previous images from adapter to prevent flicker or old data showing
            // if imageAdapter exists and imageUris is its source
            if (imageAdapter != null) {
                 imageUris.clear();
                 imageAdapter.notifyDataSetChanged(); // Notify adapter about the cleared list
            }
        }

        @Override
        protected List<Uri> doInBackground(Void... voids) {
            // Fetch images using ImageFetcher
            return ImageFetcher.getImageUris(MainActivity.this);
        }

        @Override
        protected void onPostExecute(List<Uri> fetchedUris) {
            super.onPostExecute(fetchedUris);
            if (progressBar != null) {
                progressBar.setVisibility(View.GONE);
            }

            // imageUris should have been cleared in onPreExecute if adapter existed.
            // If not, clear it here before adding new items.
            // However, to be safe and handle all cases (first load vs. subsequent),
            // ensure it's clear if adapter didn't exist, or rely on preExecute's clearing.
            // For simplicity here, we assume imageUris is ready (either fresh or cleared).
            // If it was cleared in onPreExecute, this addAll will populate it.
            // If it's a first load, it was initialized in onPreExecute.

            if (fetchedUris != null && !fetchedUris.isEmpty()) {
                imageUris.addAll(fetchedUris);
            } else {
                // Only show "No images found" if the list is truly empty after fetching
                if (imageUris.isEmpty()) {
                    Toast.makeText(MainActivity.this, "No images found.", Toast.LENGTH_SHORT).show();
                }
            }

            if (imageAdapter == null) {
                imageAdapter = new ImageAdapter(MainActivity.this, imageUris);
                recyclerView.setAdapter(imageAdapter);
            } else {
                imageAdapter.notifyDataSetChanged(); // Refresh the adapter with new/cleared data
            }
        }
    }
}
